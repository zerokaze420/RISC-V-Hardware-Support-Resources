# Simple workflow for deploying static content to GitHub Pages
name: Deploy VitePress Site to Pages

on:
  # 在针对 `main` 分支的推送上运行。如果你想在 `master` 分支上运行，请更改它
  push:
    branches: [main]

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过在进行中的运行之间排队的运行。
# 但是，不要取消进行中的运行，因为我们希望允许这些部署完成。
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要

      # --- 关键改动在这里 ---
      # 移除了 'with' 和 'version' 字段.
      # Action 会自动从你的 package.json 文件中读取 pnpm 版本.
      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm # 使用 pnpm 缓存

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        run: pnpm install

      - name: Build with VitePress
        run: pnpm docs:build # 运行 package.json 中的构建命令

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist # VitePress 默认的打包输出目录

  # 部署工作 
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

